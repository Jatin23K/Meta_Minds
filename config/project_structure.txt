# Meta Minds - Project Structure

## Core Application Files

### main.py
- **Purpose**: Main entry point of the application
- **Functionality**:
  - Orchestrates the entire workflow
  - Handles user input for dataset paths
  - Manages data loading and processing
  - Coordinates agent and task execution
  - Handles output generation and saving

### config.py
- **Purpose**: Configuration management
- **Functionality**:
  - Manages API keys and configurations
  - Sets up logging
  - Initializes the OpenAI client
  - Centralizes application settings

### data_loader.py
- **Purpose**: Data input handling
- **Functionality**:
  - Loads data from various file formats (CSV, Excel, JSON)
  - Validates file existence and format
  - Handles file reading errors
  - Returns pandas DataFrames

### data_analyzer.py
- **Purpose**: Data analysis and description
- **Functionality**:
  - Generates column descriptions using AI
  - Creates dataset summaries
  - Analyzes data structure and statistics
  - Handles data type detection

### agents.py
- **Purpose**: AI agent definitions
- **Functionality**:
  - Defines specialized AI agents for data analysis
  - Configures agent roles and behaviors
  - Manages agent interactions
  - Currently includes:
    - Schema Sleuth (analyzes data structure)
    - Curious Catalyst (generates analytical questions)

### tasks.py
- **Purpose**: Task definitions
- **Functionality**:
  - Creates analysis tasks for AI agents
  - Defines task parameters and constraints
  - Manages individual and comparison tasks
  - Handles task output formatting

### output_handler.py
- **Purpose**: Output management
- **Functionality**:
  - Saves analysis results to files
  - Handles file operations
  - Manages output formatting
  - Ensures proper file encoding and error handling

## Supporting Files

### requirements.txt
- **Purpose**: Dependency management
- **Content**:
  - Lists all Python package dependencies
  - Specifies package versions
  - Used for environment setup

### .gitignore
- **Purpose**: Version control
- **Content**:
  - Specifies files to exclude from Git
  - Protects sensitive information
  - Reduces repository size
  - Prevents committing unnecessary files

### project_structure.txt (this file)
- **Purpose**: Project documentation
- **Content**:
  - Describes project structure
  - Explains file purposes
  - Aids in project onboarding
  - Serves as a reference

## Generated Files

### meta_output.txt
- **Purpose**: Analysis results
- **Content**:
  - Contains generated questions and analyses
  - Created upon application execution
  - Includes dataset summaries and insights

## System Files

### desktop.ini
- **Purpose**: Windows folder customization
- **Note**: Automatically generated by Windows
- **Can be**: Safely ignored or deleted

### folderico-fLNqcf.ico
- **Purpose**: Custom folder icon
- **Note**: Optional customization file
- **Can be**: Removed if not using custom icons

## Directory Structure
```
Meta_Minds/
├── .git/                  # Git version control
├── __pycache__/           # Python bytecode cache
├── venv/                  # Virtual environment
├── main.py                # Main application
├── config.py              # Configuration
├── data_loader.py         # Data loading
├── data_analyzer.py       # Data analysis
├── agents.py              # AI agents
├── tasks.py               # Task definitions
├── output_handler.py      # Output management
├── requirements.txt       # Dependencies
├── .gitignore            # Git ignore rules
├── project_structure.txt  # This file
├── meta_output.txt        # Generated output
├── desktop.ini           # Windows settings
└── folderico-fLNqcf.ico  # Custom icon
```

## Setup Instructions
1. Create virtual environment: `python -m venv venv`
2. Activate environment:
   - Windows: `venv\Scripts\activate`
   - Unix/Mac: `source venv/bin/activate`
3. Install dependencies: `pip install -r requirements.txt`
4. Run application: `python main.py`

## Usage
1. Run `python main.py`
2. Enter the number of datasets to analyze
3. Provide full paths to dataset files
4. View results in `meta_output.txt`
